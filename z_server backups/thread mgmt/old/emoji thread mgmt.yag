{{/* Thread OP Management - Emoji commands 

Add/remove pinners;
un/pin messages;
un/stick messages;
resave db info (reset pinners);
delete db entry


Trigger: added and removed reactions 
*/}}

{{if not .Channel.IsThread}}
    {{return}}
{{end}}

{{if eq .Reaction.Emoji.APIName "üóëÔ∏è"}}
    {{return}}
{{end}}

{{/* emojis */}}
{{$pin := "üìå"}}
{{$removepinner := "removepinner:1120156858993356840"}}
{{$addpinner := "addpinner:1120156833991118849"}}
{{$success:= "‚úÖ"}}
{{$confuse := "‚ùì"}}
{{$save := "üíæ"}}
{{$del := "‚ùå"}}
{{$stick := "üß≤"}}

{{if not (in (cslice $pin $removepinner $addpinner $save $del $stick) .Reaction.Emoji.APIName )}}
    {{return}}
{{end}}

{{$yid := 204255221017214977}} {{/* yag */}}

{{/* mod role */}}
{{$staff := 750543521227866215}}
{{/* CC ID to update thread list */}}
{{$tlist := 314}}


{{/* for log messages */}}
{{ $tname := print (title ((getThread nil).Name) ) }}
{{ $tlink := print "[" $tname "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")" }}

{{/* embed colors */}}
{{$c1 := 0xaa5ffa}} {{/* thread created */}}
{{$c2 := 5570815}} {{/* renamed */}}
{{$c3 := 0x6d03ab}} {{/* other */}}

{{ $suffix := print "\n\n[Jump to post](" .Message.Link ") | <#" .Channel.ID "> | [Link to thread](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")" }}
{{ $footer := print "Channel ID " .Channel.ID " | From " .User.String " (ID: " .User.ID ")"}}

{{ $tcreation := cembed 
"title" (print " \"" $tname "\" Created" )
"description" (print "**" .User.Mention "** started **" $tlink "** from <#" .Channel.ParentID "> on <t:" currentTime.Unix ":F>." $suffix )
"footer" (sdict "text" $footer)
"color" $c1
}}

{{/* helpers */}}
{{$pinners := (cslice (print "<@" .Channel.OwnerID ">") )}}
{{$sticky := 0}}

{{/* check 4db */}} 
{{$tdb := (dbGet .Channel.ID "threads")}}
{{if $tdb}}
    {{if $tdb.Value.pinners}}
        {{$pinners =  $tdb.Value.pinners}}
    {{end}}
    {{if $tdb.Value.sticky}}
        {{$sticky = $tdb.Value.sticky}}
    {{end}}
{{end}}

{{/* 4db */}}
{{$tinfo := sdict 
"thread" .Channel
"tname" $tname 
"parent" .Channel.ParentID 
"pname" (getChannel .Channel.ParentID).Name
"cat" (title (getChannel (getChannel .Channel.ParentID).ParentID).Name)
"catid" (getChannel (getChannel .Channel.ParentID).ParentID).ID
"top" (print "<@" .Channel.OwnerID ">")
"pinners" $pinners
"sticky" $sticky
}}

{{/* for backwards compatibility */}}
{{if and ($tdb) (not (dbGet .Channel.ID "threads").Value.pinners)}} 
    {{dbSet .Channel.ID "threads" $tinfo }}
{{end}}

{{/* Manage Pinners */}}
{{if and (.ReactionAdded) (in (cslice $addpinner $removepinner) .Reaction.Emoji.APIName ) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) ) }}

    {{/* add pinner */}}
    {{if eq $addpinner .Reaction.Emoji.APIName}}
        {{if in $tdb.Value.pinners .Message.Author.Mention}}
            {{addReactions $confuse}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $confuse}}
        {{else}}
            {{$z := $tdb.Value.pinners.Append .Message.Author.Mention}}
            {{$tinfo.Set "pinners" $z }}
            {{$tinfo.Set "sticky" $sticky}}
            {{$y := dbSet .Channel.ID "threads" $tinfo}}
            {{addReactions $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{end}}

    {{/* remove pinner */}}
    {{else if eq $removepinner .Reaction.Emoji.APIName}}
        {{if in $tdb.Value.pinners .Message.Author.Mention}}
            {{$x := cslice}}
            {{range $tdb.Value.pinners}}
                {{- if ne $.Message.Author.Mention . -}}
                    {{- $x = $x.Append . -}}
                {{- end -}}
            {{- end}}

            {{$tinfo.Set "pinners" $x}}
            {{$tinfo.Set "sticky" $sticky}}
            {{dbSet .channel.ID "threads" $tinfo}}

            {{addReactions $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}

        {{else}}
            {{addReactions $confuse}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $confuse}}
        {{end}}
    {{end}}
{{return}}
{{end}}

{{/* Manage Pins */}}
{{if and (eq $pin .Reaction.Emoji.APIName ) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) (in $tdb.Value.pinners .User.Mention) ) }}

    {{if .ReactionAdded}} {{/* add pin */}}
        {{if .Message.Pinned}}
            {{addReactions $confuse}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $confuse}}
        {{else}}
            {{pinMessage nil .Message.ID}}
            {{addReactions $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{end}}
    {{else}} {{/* remove pin */}}
        {{if .Message.Pinned}}
            {{unpinMessage nil .Message.ID}}
            {{addReactions $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{else}}
            {{addReactions $confuse}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $confuse}}
        {{end}}
    {{end}}
{{return}}
{{end}}

{{/* manage sticky message */}}
{{if and (eq $stick .Reaction.Emoji.APIName ) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) ) }}
    {{$x := $tdb.Value.sticky}}
    {{$og := .Message}}
    {{$ogm := .Message.Content}}
    {{$sm := 0}}

    {{if $x}}
        {{if eq $og.ID $x.sm}}
            {{$og = getMessage nil $x.og}}
            {{$ogm = $og.Content}}
            {{$sm = 1}}
        {{end}}
    {{end}}


    {{if .ReactionAdded}} {{/* new sticky */}}
        {{if $x}}
             {{deleteMessage nil $x.sm 1}}
        {{end}}

        {{if $sm}}
            {{$z := sendMessageRetID nil (print .Message.Content)}}
            {{$tinfo.Set "sticky" (sdict "og" $x.og "sm" $z)}}
            {{dbSet .Channel.ID "threads" $tinfo}}
            {{return}}
        {{end}}

        {{if gt (len $ogm) 1850}}
            {{$ogm = print (slice $ogm 0 1850) ". . ."}}
        {{end}}
        {{$z := sendMessageRetID nil (print $ogm "\n-# [See original message](<" $og.Link ">)" )}}
        {{$tinfo.Set "sticky" (sdict "og" $og.ID "sm" $z)}}
        {{dbSet .Channel.ID "threads" $tinfo}}
        {{addReactions $success}}
        {{sleep 5}}
        {{deleteMessageReaction nil .Message.ID $yid $success}}

    {{else}} {{/* remove sticky */}}
        {{if $x}}
            {{if not (eq .Message.ID $x.og $x.sm)}}
                {{addReactions $confuse}}
                {{sleep 5}}
                {{deleteMessageReaction nil .Message.ID $yid $confuse}}
                {{return}}
            {{end}}

            {{deleteMessage nil $x.sm 1}}
        {{end}}

        {{$tinfo.Set "sticky" 0}}
        {{dbSet .Channel.ID "threads" $tinfo}}

        {{if not $sm}}
            {{addReactions $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{end}}
    {{end}}
{{return}}
{{end}}


{{/* mod db commands */}}
{{if and (.ReactionAdded) (in (cslice $save $del) .Reaction.Emoji.APIName) (hasRoleID $staff)}}

    {{/* resave - resets pinners & sticky */}}
    {{if (eq $save .Reaction.Emoji.APIName )}}
        {{dbSet .Channel.ID "threads" $tinfo}}
        {{addReactions $success}}
        {{ execCC $tlist nil 0 $tinfo}} {{/* update thread list */}}
        {{sleep 5}}
        {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{return}}
    
    {{/* delete db entry */}}
    {{else if (eq $del .Reaction.Emoji.APIName) }}
        {{dbDel .Channel.ID "threads"}}
        {{addReactions $success}}
        {{execCC $tlist nil 0 $tinfo}} {{/* update thread list */}}
        {{sleep 5}}
        {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{return}}
    {{end}}
{{end}}