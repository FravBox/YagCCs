{{/* 
text commands for thread db management. 
Split from main cc due to character limit.

Regex: 
^(pinner|pin|unpin|-pinners|stick|unstick)|(^-t(check|save|list|del))

*/}}

{{if or (not .Channel.IsThread) (eq .Channel.ID 1048773156002861076)}}
    {{return}}
{{end}}

{{define "tlist"}}
    {{/* updates thread list */}}
    {{$ccid := 314}} {{/* CC ID for tlist */}}
            {{execCC $ccid nil 0 (sdict 
            "cn" (.Get "cat")
            "cid" (.Get "catid")
            "p" (.Get "parent")
            "pn" (.Get "pname")
            )}}
{{end}}

{{/* channels */}}
{{$side := 750544732450717728}}
{{$log := 1007036301717016706}}
{{/* cats to ignore */}}
{{$modcat := 750544551046807602}}
{{$chillcat := 782784819863486464}}
{{/* mod role */}}
{{$staff := 750543521227866215}}
{{/* emojis */}}
{{$pin := "üìå"}}
{{$delpinner := ":removepinner:1120156858993356840"}}
{{$addpinner := ":addpinner:1120156833991118849"}}
{{$success:= "‚úÖ"}}
{{$confuse := "‚ùì"}}

{{/* Yag ID */}}
{{$yid := 204255221017214977}}

{{/* 4logs */}}
{{ $tname := print (title ((getThread nil).Name) ) }}
{{ $tlink := print "[" $tname "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")" }}

{{/* embed colors */}}
{{$c1 := 0xaa5ffa}} {{/* created */}}
{{$c2 := 5570815}} {{/* renamed */}}
{{$c3 := 0x6d03ab}} {{/* etc */}}

{{/* helpers */}}
{{$pinners := (cslice (print "<@" .Channel.OwnerID ">") )}}
{{$sticky := 0}}

{{/* check 4db */}} 
{{$tdb := (dbGet .Channel.ID "threads")}}
{{if $tdb}}
    {{if $tdb.Value.pinners}}
        {{$pinners =  $tdb.Value.pinners}}
    {{end}}
    {{if $tdb.Value.sticky}}
        {{$sticky = $tdb.Value.sticky}}
    {{end}}
{{end}}

{{/* 4db */}}
{{$tinfo := sdict 
"thread" .Channel
"tname" $tname 
"parent" .Channel.ParentID 
"pname" (getChannel .Channel.ParentID).Name
"cat" (title (getChannel (getChannel .Channel.ParentID).ParentID).Name)
"catid" (getChannel (getChannel .Channel.ParentID).ParentID).ID
"top" (print "<@" .Channel.OwnerID ">")
"pinners" $pinners
"sticky" $sticky
}}

{{/* 4backwards compatibility */}}
{{if and ($tdb) (not (dbGet .Channel.ID "threads").Value.pinners)}} 
    {{dbSet .Channel.ID "threads" $tinfo }}
{{end}}


{{/* pinner mgmt */}} 
{{if (reFind `^pinner|^-pinners` .Message.Content) }}


{{/* pinner toggle - reply to msg w/ "pinner" */}}
    {{if and (.Message.ReferencedMessage) (reFind `^pinner` .Message.Content) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) )}} 

        {{if in $tdb.Value.pinners .Message.ReferencedMessage.Author.Mention}}{{/* remove pinner */}}
            {{$x := cslice}}
            {{range $tdb.Value.pinners}}
                {{- if ne $.Message.ReferencedMessage.Author.Mention . -}}
                    {{- $x = $x.Append . -}}
                {{- end -}}
            {{- end}}

            {{$tinfo.Set "pinners" $x}}
            {{dbSet .channel.ID "threads" $tinfo}}
            {{addReactions $delpinner $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $delpinner $success}}
            {{return}}

        {{else}} {{/* add pinner */}}
            {{$z := $tdb.Value.pinners.Append .Message.ReferencedMessage.Author.Mention}}
            {{$x := $tinfo.Set "pinners" $z }}
            {{$y := dbSet .Channel.ID "threads" $tinfo}}
            {{addReactions $addpinner $success}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $delpinner $success}}
            {{return}}
        {{end}}

    {{end}} 

    {{/* list pinners - anyone can use -pinners */}}
    {{if (reFind `^-pinners` .Message.Content) }}
 
        {{sendMessage nil (cembed 
        "color" $c3
        "description" (print "### The following people can manage pins:\n" (joinStr ", " $tdb.Value.pinners) "\n\n **Thread OPs can manage pinners by reacting to their posts** with:\n<" $addpinner "> to make them a pinner, or \n<" $delpinner "> to remove them. \n\n Alternatively, toggle the pinner status by replying to one of their messages with `pinner`\n\n*Anyone can call this message with `-pinners`*") 
        )}}
        {{return}}
    {{end}}
{{end}}

{{/* pin mgmt - reply to msg w/ "pin" or "unpin" */}}
    {{if and (.Message.ReferencedMessage) (reFind `(?i)^(pin|unpin)` .Message.Content) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) (in $tdb.Value.pinners .User.Mention) )}} 

        {{if reFind `(?i)^pin` .Message.Content}} {{/* pin */}}
            {{if .Message.ReferencedMessage.Pinned}}
                {{addReactions $confuse}}
                {{sleep 5}}
                {{deleteMessageReaction nil .Message.ID $yid $confuse}}
                {{return}}
            {{else}}
                {{pinMessage nil .Message.ReferencedMessage.ID}}
                {{addReactions $success}}
                {{sleep 5}}
                {{deleteMessageReaction nil .Message.ID $yid $success}}   
                {{return}}
            {{end}}
        
        {{else}}{{/* unpin */}}
            {{if .Message.ReferencedMessage.Pinned}}
                {{unpinMessage nil .Message.ReferencedMessage.ID}}
                {{addReactions $success}}
                {{sleep 5}}
                {{deleteMessageReaction nil .Message.ID $yid $success}}
                {{return}}
            {{else}}
                {{addReactions $confuse}}
                {{sleep 5}}
                {{deleteMessageReaction nil .Message.ID $yid $confuse}}
                {{return}}
            {{end}}
        {{end}}
    {{end}}

{{/* sticky msg - reply w/ "stick" or "unstick" */}}
    {{if and (.Message.ReferencedMessage) (reFind `(?i)^(stick|unstick)` .Message.Content) (or (eq .Channel.OwnerID .User.ID) (hasRoleID $staff) )}} 
        {{$x := $tdb.Value.sticky}}
        {{$og := .Message.ReferencedMessage}}
        {{$ogm := $og.Content}}
        {{$sm := 0}}

        {{if $x}}
            {{if eq $og.ID $x.sm}}
                {{$og = getMessage nil $x.og}}
                {{$ogm = (getMessage nil $x.og).Content}}
                {{$sm = 1}}
            {{end}}
            {{deleteMessage nil $x.sm 1}}
        {{end}}

        {{if reFind `(?i)^un` .Message.Content}} {{/* unsticky */}}
            {{if $x}}
                {{if and (ne $og.ID $x.og) (ne $og.ID $x.sm)}}
                    {{addReactions $confuse}}
                    {{deleteTrigger 5}}
                    {{return}}
                {{end}}
            {{end}}
            
            {{$tinfo.Set "sticky" 0}}
            {{dbSet .Channel.ID "threads" $tinfo}}
            {{addReactions $success}}
            {{deleteTrigger 5}}
            {{return}}

        {{else}} {{/* sticky */}}
            {{if $sm}}
                {{$z := sendMessageRetID nil (print (getMessage nil $x.sm).Content)}}
                {{$tinfo.Set "sticky" (sdict "og" $tdb.Value.sticky.og "sm" $z)}}
                {{dbSet .Channel.ID "threads" $tinfo}}
                {{addReactions $success}}
                {{deleteTrigger 5}}
                {{return}}
            {{end}}
                
            {{if gt (len $ogm) 1850}}
                {{$ogm = print (slice $ogm 0 1850) ". . ."}}
            {{end}}
            
            {{$z := sendMessageRetID nil (print $ogm "\n-# [See original message](<https://discord.com/channels/" .Guild.ID "/" .Channel.ID "/" $og.ID ">)" )}}
            {{$tinfo.Set "sticky" (sdict "og" $og.ID "sm" $z)}}
                {{dbSet .Channel.ID "threads" $tinfo}}
            {{addReactions $success}}
            {{deleteTrigger 5}}
            {{return}}
        {{end}}
    {{end}}

{{/* db cmds 4mods */}}
    {{if and (reFind `^-t` .Message.Content) (hasRoleID $staff)}}
        
        {{if (reFind `^-tcheck` .Message.Content)}} {{/* display db info */}}
            {{sendMessage nil (cembed 
            "title" "Thread Information"
            "description" (print "**Thread:** \n" $tdb.Value.cat " > <#" $tdb.Value.parent "> > [" $tdb.Value.tname "](https://discord.com/channels/" .Guild.ID "/" $tdb.Value.thread.ID ") | <#" $tdb.Value.thread.ID "> \n\n**Thread OP:** " $tdb.Value.top "\n\n**Pinners:**\n" (joinStr ", " $tdb.Value.pinners ) )
            )}}
            {{return}}

        {{else if (reFind `^-tsave` .Message.Content)}} {{/* resave info (this will reset pinners & sticky msg) */}}
            {{dbSet .Channel.ID "threads" $tinfo}}
            {{addReactions $success}}
            {{/* template "tlist" $tinfo */}} {{/* update thread list */}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
            {{return}}

        {{else if (reFind `^-tdel` .Message.Content)}} {{/* delete db entry */}}
            {{dbDel .Channel.ID "threads"}}
            {{addReactions $success}}
            {{/* template "tlist" $tinfo*/}} {{/* update thread list */}}
            {{sleep 5}}
            {{deleteMessageReaction nil .Message.ID $yid $success}}
            {{return}}

        {{else if (reFind `^-tlist` .Message.Content)}} {{/* force update tlist */}}
        {{ template "tlist" $tinfo }}
        {{addReactions $success}}
        {{sleep 5}}
        {{deleteMessageReaction nil .Message.ID $yid $success}}
        {{return}}
        {{end}}
    {{end}}