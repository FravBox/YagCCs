{{/* Master thread management & logging cmds with Execs
regex \A 
*/}}


{{/* role ID of people who can use the database commands */}}
{{$staff := 750543521227866215 }} 

{{/* db saving & thread logging cc for execCC */}}
{{$ccid := 244}}

{{/* ACTUAL CODE */}}

{{if .Channel.IsThread }}

    {{/* info to help exec other CCs */}}
    {{$thr := .Channel}}
    {{$thrn := (getThread nil).Name}}
    {{$paren := .Channel.ParentID}}
    {{$cate := (title (getChannel (getChannel .Channel.ParentID).ParentID).Name)}}
    {{$thra := .Message.Author}}
    {{$catid := (getChannel (getChannel .Channel.ParentID).ParentID)}}
    {{$1 := "1"}}
    {{$2 := "2"}}
    {{$3 := "3"}}

    {{$tinfo := sdict 
    "thread" $thr 
    "tname" $thrn 
    "parent" $paren 
    "cat" $cate
    "tauthor" $thra
    }}

    {{/* check db for entry */}} 
    {{$tdb := (dbGet .Channel.ID "threads")}}

        
    {{/* save new thread to db */}}
    {{if and (not $tdb) (ne .Message.Type 4)}}
        
        {{if not (reFind `^-t.*|^save$|^(pin|unpin)$` .Message.Content) }}
                {{/* Make new db entry & send new thread message to logs */}}
                {{execCC $ccid nil 0 (sdict "thread" $thr "tname" $thrn "parent" $paren "cat" $cate "tauthor" $thra "user" .User "msgl" .Message.Link "catid" $catid "type" $1)}}
        {{end}}
        
    {{/* save thread renames to db */}}
    {{else if (eq .Message.Type 4)}}
        {{$x := reFind `.*` .Message.Content}} {{/* get new name from name change message */}}  
        {{$y:= (print "**[" $x "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")**" )}}

        {{/* renamed thread log message */}}
                {{execCC $ccid nil 0 (sdict "thread" $thr "tname" $thrn "parent" $paren "cat" $cate "tauthor" $thra "user" .User "msgl" .Message.Link "catid" $catid "type" $2 "x" $x "y" $y)}}

    {{end}}





    {{/* Check current database : -tcheck */}}

    {{$tcheck := (print "**The thread is already in the database.** \n\nSaved Thread Author: `" $tdb.Value.tauthor.Username "#" $tdb.Value.tauthor.Discriminator "` \nPrevious Thread Name: `" $tdb.Value.thread.Name "`\nCurrent Name: `" $tdb.Value.tname "`")}} 
   

    {{if hasRoleID $staff}}

        {{if and (reFind `^-tcheck$` .Message.Content)}}
            
            {{if $tdb}}

                {{$x := sendMessageRetID nil $tcheck}}
                {{deleteMessage nil $x 20}}
                {{deleteTrigger 21}}
            {{else}}
                Thread is not in the database.
                {{deleteResponse 20}}
                {{deleteTrigger 21}}
            {{end}}
        
        {{/* Force delete a db entry : -tdel */}}
        {{else if and (reFind `(?i)^-tdel$` .Message.Content)}}
                {{if $tdb}}
                    {{dbDel .Channel.ID "threads"}}
                    Thread was in the database already, but it's deleted now.
                {{else}}
                    There was no database entry to delete.
                {{end}}
            {{deleteResponse 20}}
            {{deleteTrigger 21}} 
            
       
        {{/* Force save new db entry to make a new thread author : reply to another message with "save" */}}
        {{else if and (.Message.ReferencedMessage) (reFind `(?i)^save$` .Message.Content)}}
            {{$tauth := .Message.ReferencedMessage.Author }}{{/* gets author of parent message */}}

            {{$new := "\n\n**This will be the new information:**\n"}}
            {{$new2 := "\n\n**New Thread Information Saved.**\n\n"}}
            {{$tcheck2 := (print "Thread Author: `" $tauth "` \nCurrent Thread Name: `" .Channel.Name "`")}}

            {{$tc1 := sendMessageRetID nil (print $tcheck $new $tcheck2)}}

            {{$tinfo.Set "tauthor" $tauth}} 
            {{$ra := .Message.ReferencedMessage.Author.Mention}}
            {{$ra2 := .Message.ReferencedMessage.Author}}
                
            {{if $tdb}}
                {{/* save new author  & log it */}}
                {{execCC $ccid nil 0 (sdict "thread" $thr "tname" $thrn "parent" $paren "cat" $cate "tauthor" $thra "tauthor2" $tauth "user" .User "msgl" .Message.Link "catid" $catid "type" $3 "ra" $ra "ra2" $ra2)}}
            
            {{else}}
                {{/* treat it like new thread creation */}}
                {{execCC $ccid nil 0 (sdict "thread" $thr "tname" $thrn "parent" $paren "cat" $cate "tauthor" $thra "user" .User "msgl" .Message.Link "catid" $catid "type" $1)}}
            {{end}}

            {{sleep 1}}

            {{editMessage nil $tc1 (print $tcheck2 $new2 "*This message will delete in 20 seconds.*") }}
            {{deleteMessage nil $tc1 20}}
            {{deleteTrigger 21}}

        {{end}}
        
    {{else if and (not (reFind `(?i)^(pin|unpin)` .Message.Content)) (not (hasRoleID $staff))}}
        You don't have the right role to use this command.
        {{deleteResponse 20}}
        {{deleteTrigger 21}}     
    {{end}}

    
    {{/* Allow thread authors to manage pins in their own threads : reply to message with "pin" or "unpin" */}}
    {{if and ($tdb) (.Message.ReferencedMessage) (reFind `(?i)^(pin|unpin)$` .Message.Content)}}
        {{if eq .User.ID $tdb.Value.tauthor.ID}}
            {{deleteTrigger 2}}
        
            {{if eq (lower .Message.Content) "pin" }} {{/* pin command */}}
                {{if .Message.ReferencedMessage.Pinned}}
                    {{$msg := sendMessageRetID nil "Message is already pinned."}}
                    {{deleteMessage nil $msg 2}}
                {{else}}
                    {{pinMessage nil .Message.ReferencedMessage.ID}}
                {{end}}
            {{else if eq (lower .Message.Content) "unpin"}} {{/* unpin command */}}
                {{if not .Message.ReferencedMessage.Pinned}}
                    {{$msg := sendMessageRetID nil "Message is already unpinned."}}
                    {{deleteMessage nil $msg 2}}
                {{else}}
                    {{unpinMessage nil .Message.ReferencedMessage.ID}}
                    {{$msg := sendMessageRetID nil "Message unpinned."}}
                    {{deleteMessage nil $msg 2}}
                {{end}}
            {{end}}
        {{else}}
            {{print "Only the thread author can manage pins.\nThe current thread author is `" $tdb.Value.tauthor.Username "`"}}
            
            {{deleteResponse 5}}
            {{deleteTrigger 6}}
        {{end}}
    {{end}}
{{end}}