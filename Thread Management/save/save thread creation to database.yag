{{/* Thread Management database controls

regex trigger: /A
*/}}

{{$time := 15770000 }} {{/* db entry expiration in seconds - default 6 months */}}
{{$staff := 750543470325923950 }} {{/* role ID of people who can use the database commands */}}

{{$tpins := 1}} {{/* enable thread authors to manage pinned messages in their own threads? 1 - yes, 0 - no. default is 1 */}}



{{$ylog := 2}} {{/* do you want thread logging? 1 - only original thread creation, 2 - original, force renews, and thread renames, 0 - no logs. default is 2 */}}

{{$ch := 765344516034265099 }} {{/* logging channel ID */}}
{{$color := 4645612}}{{/* embed color, in decimal */}}


{{/* DO NOT EDIT ANYTHING BELOW */}}

{{if .Channel.IsThread }}
    {{$tdb := (dbGet .Channel.ID (getThread nil).Name)}}

    {{$link := (print .Channel.Mention " | [Link to thread](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")" )}}
    {{$nlink := (print "**[" .Channel.Name "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")**" )}}
    {{$tname := (getThread nil).Name}}

    {{/* save new thread to db */}}
    {{if and (not $tdb) (ne .Message.Type 4)}}
        {{if not (reFind `^-t.*|^save$|^(pin|unpin)$` .Message.Content) }}
         {{dbSetExpire .Channel.ID $tname .Message.Author $time}}
         
            {{if (ne $ylog 0)}}
                {{/* new thread log message */}}
                {{ $embed1 := cembed 
                "title" (print "\"" .Channel.Name "\" thread created" )
                "description" (joinStr "" "**" .User.Mention "** (" .User ") started " $nlink " from <#" .Channel.ParentID ">.\n\n[Jump to first post](" .Message.Link ") | " $link ) 
                "color" $color 
                "footer" 
                (sdict 
                    "text" (joinStr "" "User ID: " .User.ID ) )
                    "timestamp" .Message.Timestamp
                    }}
                {{sendMessage $ch $embed1}} 
            {{end}}
        {{end}}
    {{end}}
    {{/* save thread renames to db */}}
    {{/* DOESN'T WORK RIGHT - sends log but then doesn't actually update db until a non-bot user posts after. This results in extra "thread created" message for the first post after a rename. */}}
    {{if (eq .Message.Type 4)}}
        {{dbSetExpire .Channel.ID $tname .Message.Author 1}}{{/* overwrite entry with previous name, then delete it  */}}

        {{sleep 1}}
         {{dbSetExpire .Channel.ID ((getThread nil).Name) .Message.Author $time}}{{/* make entry with new name */}}
        {{if (eq $ylog 2)}}
            {{/* renamed thread log message */}}
            {{ $embed2 := cembed 
            "title" (print "\"" $tname "\" Thread Changed Names ")
            "description" (print $tname " in <#" .Channel.ParentID "> just changed its name to " $nlink "(<#" .Channel.ID ">).\n*This action was triggered by" .User.Mention "*\n\n[Jump to post](" .Message.Link ") | " $link ) 
            "color" $color 
            "footer" 
            (sdict 
                "text" (joinStr "" "User ID: " .User.ID ) )
            "timestamp" .Message.Timestamp
            }}

            {{sendMessage $ch $embed2}}
        {{end}}
        
    {{end}}

    {{/* Check current database : -tcheck */}}

    {{$tcheck := (print "**The thread is already in the database.** \n\nSaved Thread Author: `" $tdb.Value.Username "` \nSaved Thread Title: `" $tdb.Key "` \n ")}} 
   
        {{if and (reFind `^-tcheck$` .Message.Content) (hasRoleID $staff)}}
            {{if $tdb}}
                {{$x := sendMessageRetID nil $tcheck}}
                {{deleteMessage nil $x 20}}
                {{deleteTrigger 21}}
            {{else}}
                Thread is not in the database.
                {{deleteResponse 20}}
                {{deleteTrigger 21}}
            {{end}}
        
    {{/* Force delete a db entry : -tdel */}}
        {{else if and (reFind `(?i)^-tdel$` .Message.Content) (hasRoleID $staff)}}
            {{dbSetExpire .Channel.ID $tname .Message.Author 1}}{{/* saves over & deletes in 1 second */}}
            {{sleep 1}}
                {{if $tdb}}
                    Thread was in the database already, but it's deleted now.
                {{else}}
                    There was no database entry to delete.
                {{end}}
            {{deleteResponse 20}}
            {{deleteTrigger 21}} 
        {{else if and (reFind `(?i)^-tdel$|^-tcheck$` .Message.Content) (not (hasRoleID $staff))}}
            You don't have the right role to use this command.
            {{deleteResponse 20}}
            {{deleteTrigger 21}}     
        {{end}}

    {{/* Force save new db entry : reply to another message with "save" */}}
	{{if and (.Message.ReferencedMessage) (reFind `(?i)^save$` .Message.Content) (hasRoleID $staff)}}
        {{$tdb2 := (dbGet .Channel.ID $tname)}}
        {{$tauth := .Message.ReferencedMessage.Author }}{{/* gets author of parent message */}}
        
        {{$tc2 := (print "**New thread info saved.** \nNew Thread Author: `" $tauth "` \nNew Thread Name: `" $tname "`" )}}

        {{if $tdb}}
            {{$tcheck2 := (print "\n\n**This will be the new information:**\nNew Thread Author: `" $tauth "` \nNew Thread Name: `" $tname "` \n\n *Wait for this message to edit itself.*")}}

            {{$tc1 := sendMessageRetID nil (print $tcheck $tcheck2)}}
            
            {{$tset := dbSetExpire .Channel.ID $tname $tauth $time}}
            {{sleep 5}}

            {{if (ne $ylog 2)}}
                {{$tc3 := editMessage nil $tc1 (print $tc2 "\n\n *This message will delete in 20 seconds.*") }}
                {{deleteMessage nil $tc1 20}}
            {{else}}
                {{$tc3 := editMessage nil $tc1 (print $tc2 ) }}
            {{end}}
           
        {{else}}    
            
            {{$tset := dbSetExpire .Channel.ID $tname $tauth $time}}
            {{sleep 1}}
            
            
            {{$x := sendMessageRetID nil (print "**New thread info saved.** \nNew Thread Author: `" $tdb2.Value.Username "` \nNew Thread Name: `" $tdb2.Key "`" )}}
        	
            {{if (ne $ylog 2)}}
                {{deleteMessage nil $x 20}}
            {{end}}
        {{end}}
            {{if (eq $ylog 2)}}

                {{/* log message when thread info is force re-saved */}}
                {{ $embed2 := cembed 
                "title" "Thread Information Changed" 
                "description" (joinStr "" "** " .Message.ReferencedMessage.Author.Mention "** (" .Message.ReferencedMessage.Author ") can now control pins in the " $nlink " thread of <#" .Channel.ParentID ">.\n*This action was triggered by" .User.Mention "*\n\n[Jump to post](" .Message.Link ") | " $link ) 
                "color" $color 
                "footer" 
                (sdict 
                    "text" (joinStr "" "User ID: " .User.ID ) )
                "timestamp" .Message.Timestamp
                }}

                {{sendMessage $ch $embed2}}
            {{else if (eq $ylog 0) }}
                {{deleteTrigger 21}}
            {{end}}
        {{else if and (.Message.ReferencedMessage) (reFind `(?i)^save$` .Message.Content) (not (hasRoleID $staff))}}
            You don't have the right role to use this command.
            {{deleteResponse 20}}
            {{deleteTrigger 21}}
    {{end}}
{{/* Allow thread authors to manage pins in their own threads : reply to message with "pin" or "unpin" */}}
{{if and ($tdb) (.Message.ReferencedMessage) (reFind `(?i)^(pin|unpin)$` .Message.Content)}}
    {{if eq .User.ID $tdb.Value.ID}}
        {{deleteTrigger 6}}
       
        {{if eq (lower .Message.Content) "pin" }} {{/* pin command */}}
            {{if .Message.ReferencedMessage.Pinned}}
                {{$msg := sendMessageRetID nil "Message is already pinned."}}
				{{deleteMessage nil $msg 5}}
            {{else}}
                {{pinMessage nil .Message.ReferencedMessage.ID}}
            {{end}}
        {{else if eq (lower .Message.Content) "unpin"}} {{/* unpin command */}}
            {{if not .Message.ReferencedMessage.Pinned}}
                {{$msg := sendMessageRetID nil "Message is already unpinned."}}
                {{deleteMessage nil $msg 5}}
            {{else}}
                {{unpinMessage nil .Message.ReferencedMessage.ID}}
                {{$msg := sendMessageRetID nil "Message unpinned."}}
                {{deleteMessage nil $msg 5}}
            {{end}}
        {{end}}
    {{else}}
        Only the thread author can manage pins. 
        The current thread author is `{{$tdb.Value.Username}}`
        
        {{deleteResponse 5}}
        {{deleteTrigger 6}}
    {{end}}
{{end}}

{{end}}