{{/* Thread Management database controls
regex: /A
*/}}

{{$time := 120 }} {{/* database entry expiration in seconds - default 6 months */}}
{{$staff := 750543470325923950 }} {{/* role ID of people who can use the database commands */}}

{{$tpins := 1}} {{/* enable thread authors to manage pinned messages in their own threads? 1 - yes, 0 - no. default is 1 */}}

{{$ylog := 2}} {{/* do you want thread logging? 1 - only original thread creation, 2 - original, force renews, and thread renames, 0 - no logs. default is 2 */}}

{{$ch := 765344516034265099 }} {{/* logging channel ID */}}

{{/* embed colors */}}
{{$c1 := 0xaa5ffa}} {{/* thread created */}}
{{$c2 := 5570815}} {{/* info/author changed */}}
{{$c3 := 0x6d03ab}} {{/* renamed */}}


{{/* DO NOT EDIT ANYTHING BELOW */}}

{{if .Channel.IsThread }}

     {{/* Get thread author */}}
    {{ $tauth := (getMessage .Channel.ParentID .Channel.ID).Author}} 

    {{/* make sdict for database */}} 
    {{$tinfo := sdict
    "thread" .Channel
    "tname" .Channel.Name
    "tauthor" $tauth
    }}

    {{/* check database for entry */}} 
    {{txx := (dbGet .Channel.ID .Channel.ParentID)}}

    {{/* stuff for log messages */}} 
    {{$uid := (print "Action triggered by " .User.String " | User ID: " .User.ID )}}
    {{$t := .Message.Timestamp }}
    {{$link := (print .Channel.Mention " | [Link to thread](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")" )}}
    {{$nlink := (print "**[" .Channel.Name "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")**" )}}
    {{$trig := (print "\n\n[Jump to post](" .Message.Link ") | " $link) }}

    {{/* save new thread to database */}}
    {{if and (not txx) (ne .Message.Type 4)}}
        {{if not (reFind `^-t.*|^save$|^(pin|unpin)$` .Message.Content) }}
         {{dbSetExpire .Channel.ID .Channel.ParentID $tinfo $time}}
         
            {{if (ne $ylog 0)}}
                {{/* new thread log message */}}
                {{ $embed1 := cembed 
                "title" (print "Thread Created: \"" .Channel.Name "\"" )
                "description" (joinStr "" "**" .User.Mention "** (`" .User "`) started " $nlink " from <#" .Channel.ParentID ">.\n\n[Jump to first post](" .Message.Link ") | " $link ) 
                "color" $c1 
                "footer" (sdict "text" $uid ) "timestamp" $t
                }}
                {{sendMessage $ch $embed1}} 
            {{end}}
        {{end}}
    
    {{/* save thread renames to database */}}
    {{else if (eq .Message.Type 4)}}
        
        {{$x := reFind `.*` .Message.Content}} {{/* get new name from name change message bc discord is dumb */}}  
        {{$silent := $tinfo.Get "tname"}}
        {{$tinfo.Set "tname" $x}}
        
        {{/* get previous author info so we don't lose it */}}
        {{$silent2 := (dbGet .Channel.ID .Channel.ParentID).Value.tauthor }}
        {{dbSetExpire .User.ID "TAuthor" $silent2 10}}
        {{$silent3 := $tinfo.Get "tauthor"}}
        {{$tinfo.Set "tauthor" $silent2}}

        {{/* make new entry with new thread name but old thread author */}}  
        {{dbSetExpire .Channel.ID .Channel.ParentID $tinfo $time}}     
         
        {{if (eq $ylog 2)}}
            {{txx2 := dbGet .Channel.ID .Channel.ParentID}}
            {{$silent3 := $tinfo.Get "thread"}}

            {{$y:= (print "**[" $x "](https://discord.com/channels/" .Guild.ID "/" .Channel.ID ")**" )}}
            {{/* renamed thread log message */}}
            {{ $embed2 := cembed 
            "title" (print "Thread Name Change: " txx2.Value.thread.Name " ➡️ " $x )
            "description" (print "**" txx2.Value.thread.Name "** in <#" .Channel.ParentID "> just changed its name to " $y " (<#" .Channel.ID ">)." $trig )
            "color" $c2 
            "footer" (sdict "text" $uid ) "timestamp" $t
            }}

            {{sendMessage $ch $embed2}}
 
        {{end}}
        
    {{end}}

    {{/* Check current database : -tcheck */}}

    {{$tcheck := (print "**The thread is already in the database.** \n\nSaved Thread Author: `" txx.Value.tauthor.Username "#" txx.Value.tauthor.Discriminator "` \nPrevious Thread Name: `" txx.Value.thread.Name "`\n Current Name: `" txx.Value.tname "`")}} 
   
        {{if and (reFind `^-tcheck$` .Message.Content) (hasRoleID $staff)}}
            {{if txx}}

                {{txx = (dbGet .Channel.ID .Channel.ParentID)}} {{/* reload database entry to fix any bugs */}}
                {{$x := sendMessageRetID nil $tcheck}}
                {{deleteMessage nil $x 20}}
                {{deleteTrigger 21}}
            {{else}}
                Thread is not in the database.
                {{deleteResponse 20}}
                {{deleteTrigger 21}}
            {{end}}
        
    {{/* Force delete a database entry : -tdel */}}
        {{else if and (reFind `(?i)^-tdel$` .Message.Content) (hasRoleID $staff)}}
                {{if txx}}
                    {{dbDel .Channel.ID .Channel.ParentID}}
                    Thread was in the database already, but it's deleted now.
                {{else}}
                    There was no database entry to delete.
                {{end}}
            {{deleteResponse 20}}
            {{deleteTrigger 21}} 
        {{else if and (reFind `(?i)^-tdel$|^-tcheck$` .Message.Content) (not (hasRoleID $staff))}}
            You don't have the right role to use this command.
            {{deleteResponse 20}}
            {{deleteTrigger 21}}     
        {{end}}

    {{/* Force save new database entry : reply to another message with "save" */}}
	{{if and (.Message.ReferencedMessage) (reFind `(?i)^save$` .Message.Content) (hasRoleID $staff)}}
        {{txx2 := (dbGet .Channel.ID .Channel.ParentID)}}
        {{$tauth := .Message.ReferencedMessage.Author }}{{/* gets author of parent message */}}

        {{if txx}}
            {{$new := "\n\n**This will be the new information:**\n"}}
            {{$new2 := "**New Thread Information Saved.**\n\n"}}
            {{$tcheck2 := (print "Thread Author: `" $tauth "` \nPrevious Thread Name: `" txx2.Value.thread.Name "`\nCurrent Thread Name: `" txx2.Value.tname "`")}}
            {{$wait := "\n\n*Wait for this message to edit itself.*"}}

            {{$tc1 := sendMessageRetID nil (print $tcheck $new $tcheck2 $wait)}}


            {{/* save old author for logging */}}
            {{$oldtauth := (print txx.Value.tauthor.Username "#" txx.Value.tauthor.Discriminator ) }}
            {{dbSetExpire .User.ID "Old TA" $oldtauth 10}}
            
            {{/* save new author */}}
            {{$silent := $tinfo.Get "tauthor"}}
            {{$tinfo.Set "tauthor" $tauth}} 
            {{dbSetExpire .Channel.ID .Channel.ParentID $tinfo $time}} 
            
            {{sleep 5}}

            {{if (ne $ylog 2)}}
                {{$tc3 := editMessage nil $tc1 (print $new2 $tcheck2 "\n\n *This message will delete in 20 seconds.*") }}
                {{deleteMessage nil $tc1 20}}
            {{else}}
                {{$tc3 := editMessage nil $tc1 (print $new2 $tcheck2 ) }}
            {{end}}
           
        {{else}}    
            {{.Set "tauthor" $tauth}} {{/* save new author */}}
            {{sleep 1}}
                      
            {{$x := sendMessageRetID nil (print $new2 $tcheck2 )}}
        	
            {{if (ne $ylog 2)}}
                {{deleteMessage nil $x 20}}
            {{end}}
        {{end}}
            {{if (eq $ylog 2)}}

                {{/* log thread info change */}}
                {{$oldTA := dbGet .User.ID "Old TA"}}{{/* grab old author */}}
                {{ $embed2 := cembed 
                "title" "Thread Information Change" 
                "description" (joinStr "" "** " .Message.ReferencedMessage.Author.Mention "** (`" .Message.ReferencedMessage.Author "`) can now control pins in the " $nlink " thread of <#" .Channel.ParentID ">.\nThe previous thread author was `" $oldTA.Value "`. " $trig ) 
                "color" $c3 
                "footer" (sdict "text" $uid ) "timestamp" $t
                }}

                {{sendMessage $ch $embed2}}
            {{else if (eq $ylog 0) }}
                {{deleteTrigger 21}}
            {{end}}
        {{else if and (.Message.ReferencedMessage) (reFind `(?i)^save$` .Message.Content) (not (hasRoleID $staff))}}
            You don't have the right role to use this command.
            {{deleteResponse 20}}
            {{deleteTrigger 21}}
    {{end}}

{{/* Allow thread authors to manage pins in their own threads : reply to message with "pin" or "unpin" */}}
{{if and (txx) (.Message.ReferencedMessage) (reFind `(?i)^(pin|unpin)$` .Message.Content)}}
    {{if eq .User.ID txx.Value.tauthor.ID}}
        {{deleteTrigger 6}}
       
        {{if eq (lower .Message.Content) "pin" }} {{/* pin command */}}
            {{if .Message.ReferencedMessage.Pinned}}
                {{$msg := sendMessageRetID nil "Message is already pinned."}}
				{{deleteMessage nil $msg 5}}
            {{else}}
                {{pinMessage nil .Message.ReferencedMessage.ID}}
            {{end}}
        {{else if eq (lower .Message.Content) "unpin"}} {{/* unpin command */}}
            {{if not .Message.ReferencedMessage.Pinned}}
                {{$msg := sendMessageRetID nil "Message is already unpinned."}}
                {{deleteMessage nil $msg 5}}
            {{else}}
                {{unpinMessage nil .Message.ReferencedMessage.ID}}
                {{$msg := sendMessageRetID nil "Message unpinned."}}
                {{deleteMessage nil $msg 5}}
            {{end}}
        {{end}}
    {{else}}
        {{print "Only the thread author can manage pins.\nThe current thread author is `" txx.Value.tauthor.Username "`"}}
        
        {{deleteResponse 5}}
        {{deleteTrigger 6}}
    {{end}}
{{end}}

{{end}}