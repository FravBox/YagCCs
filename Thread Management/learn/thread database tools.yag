{{/* Thread list proof of concept by Vars#3616 - https://github.com/FravBox/YagCCs
If you are in a thread, it will save a db entry. If you are in a channel, it will list all the threads.
I use regex \A and limit it to only a few channels, but you can run it however you want as long as it's text-based.

The thread list portion was written by Shadow22A.

This is not meant to be used as an actual CC. It is a base for learning or modifying this CC to make your own.
*/}}

{{$amt := 10}} {{/* how many db entries to get. Max 100 */}}
{{$time := 300}} {{/* seconds before db entry expires */}}


{{/* thread code */}}
{{if .Channel.IsThread}}

    {{/* create dict for db entry values - thread channel info, thread name, thread's parent channel, the category the thread is in (name only), the thread author */}}
        {{$tinfo := sdict 
        "thread" .Channel
        "tname" (getThread nil).Name 
        "parent" .Channel.ParentID 
        "cat" (getChannel (getChannel .Channel.ParentID).ParentID).Name
        "tauthor" .Message.Author
        }}

    {{/* create db entry for thread */}}
    {{dbSetExpire .Channel.ID "threads" $tinfo $time}}
    db set

{{end}}


{{/* channel code for the thread list */}}    
{{if not .Channel.IsThread}}

    {{$q := sendMessageRetID nil "loading..."}} {{/* Its kinda slow so i send this message at beginning and edit it later */}}

    {{$dict := dict}} {{/* initializing the $dict */}}

    {{range (dbTopEntries "threads" $amt 0)}} {{/* getting $amt of db entries with key "threads" (max 100) */}}
        
        {{/* making key value pair just for categories here */}}
        {{- $dict.Set .Value.cat (or ($dict.Get .Value.cat) dict) -}} 
        
        {{/* making key value pair under "categories" with channel : thread pairs */}}
        {{- ($dict.Get .Value.cat).Set .Value.parent ((or (($dict.Get .Value.cat).Get .Value.parent) cslice).Append .Value.thread.ID) -}} 
        {{/* basically above code makes dict like this {{dict Category1 (dict ChannelA [thread1, thread2, ..] ChannelB [ThreadA, TheradB, ..]) Category2 (dict ChannelC [ThreadX, ThreadY, ThreadZ, ..]) .. }} */}}
    
{{end}}


{{/* Initializing some more variables */}}
{{$desc := ""}}
{{$g := .Guild.ID}}
{{$indent := "ã…¤"}} {{/* \t & space were being stripped, so we used a unicode space character */}}

{{/* ranging $dict we created above, with $k as "Categories" $v as "Channel: Thread dict" */}}
    {{range $k, $v := $dict}} 
      {{- $desc = printf "%s\n**__Category:__**    %s\n" $desc (getChannel $k).Name}} {{/* Printf magik */}}

      {{- range $y, $z := $v -}} {{/* ranging $V "Channel: Thread dict" with $y as Channel and $z as threads */}}

        {{- $desc = printf "%s\n%sChannel: <#%d>\n" $desc $indent $y -}} {{/* more printf magik */}}

        {{- range $z -}} {{/* ranging $z "threads list" */}}

            {{- $desc = printf "%s%s%[2]sThread: <#%d> | [%s](https://discord.com/channels/%d/%d)\n" $desc $indent .ID .Name $g .ID -}} {{/* MOOAARR printf magik */}}
            
        {{- end -}}
      {{- end -}}
    {{end}} 

    {{$embed := cembed "title" "test" "description" $desc}}
    {{editMessage nil $q (complexMessageEdit "content" "" "embed" $embed)}} {{/* editing that old "loading.." message here */}}
{{end}}